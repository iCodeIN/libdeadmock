// Copyright (c) 2018 libdeadmock developers
//
// Licensed under the Apache License, Version 2.0
// <LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0> or the MIT
// license <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your
// option. All files in the project carrying such notice may not be copied,
// modified, or distributed except according to those terms.

//! Errors generated by the library
use std::fmt;

#[derive(Debug)]
/// Errors generated by the library
pub enum Error {
    ///
    InvalidHeaderName(http::header::InvalidHeaderName),
    ///
    InvalidHeaderValue(http::header::InvalidHeaderValue),
    ///
    InvalidProxyConfig,
    ///
    IO(std::io::Error),
    ///
    MappingKeyCollision,
    ///
    MappingNotFound,
    ///
    TomlDe(toml::de::Error),
}

impl fmt::Display for Error {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            Error::InvalidProxyConfig => write!(f, "invalid proxy configuration!"),
            Error::IO(e) => write!(f, "{}", e),
            _ => write!(f, ""),
        }
    }
}

impl From<std::io::Error> for Error {
    fn from(e: std::io::Error) -> Self {
        Error::IO(e)
    }
}

impl From<toml::de::Error> for Error {
    fn from(e: toml::de::Error) -> Self {
        Error::TomlDe(e)
    }
}

impl From<http::header::InvalidHeaderName> for Error {
    fn from(e: http::header::InvalidHeaderName) -> Self {
        Error::InvalidHeaderName(e)
    }
}

impl From<http::header::InvalidHeaderValue> for Error {
    fn from(e: http::header::InvalidHeaderValue) -> Self {
        Error::InvalidHeaderValue(e)
    }
}
